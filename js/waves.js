// Aliases.
let Application = PIXI.Application;
let Graphics = PIXI.Graphics;

let appWidth = 500;
let appHeight = 500;

// Initiate the application.
let app = new Application({
    width: appWidth,
    height: appHeight,
    antialias: true,
    transparent: false,
    resolution: 1
});

let wave;
let wave2;

function setup() {
    wave = new Wave(appWidth / 2, appHeight / 2, 10);
    wave2 = new Wave(200, 300 / 2, 10);

    for (let gc of wave.getGraphicalComponents()) {
        app.stage.addChild(gc);
    }

    for (let gc of wave2.getGraphicalComponents()) {
        app.stage.addChild(gc);
    }

    app.ticker.add(delta => gameloop(delta));
}

function gameloop(delta) {

    if (wave.radius < 200 ) {
        wave.expand();
    }

    if (wave2.radius < 150) {
        wave2.expand();
    }
}

setup();

// Add the canvas generated by PIXI to the DOM.
document.body.appendChild(app.view);


function Wave(x_coordinate, y_coordinate, radius) {
    console.log("Creating wave!");
    this.x_coordinate = x_coordinate;
    this.y_coordinate = y_coordinate;
    this.radius = radius;

    this.createCircle = function(color, radius) {
        let circle = new Graphics();
        circle.beginFill(color);
        circle.drawCircle(0, 0, radius);
        circle.endFill();
        circle.x = this.x_coordinate;
        circle.y = this.y_coordinate;
        return circle;
    };

    this.outerCircle = this.createCircle(0xFFFFFF, this.radius);
    this.innerCircle = this.createCircle(0x000000, this.radius - 1);

    this.outerCircle.alpha = 0.5;
    this.innerCircle.alpha  = 1;

    this.expand = function() {
        let sizeIncrement = 4;
        
        this.radius += sizeIncrement;

        this.outerCircle.width += sizeIncrement;
        this.outerCircle.height += sizeIncrement;
        
        this.innerCircle.width += sizeIncrement;
        this.innerCircle.height += sizeIncrement;
    }

    this.getGraphicalComponents = function() {
        return [this.outerCircle, this.innerCircle];
    }

}