// Aliases.
let Application = PIXI.Application;
let Graphics = PIXI.Graphics;

let appWidth = 500;
let appHeight = 500;

// Initiate the application.
let app = new Application({
    width: appWidth,
    height: appHeight,
    antialias: true,
    transparent: false,
    resolution: 1
});

let waves = [];

function setup() {
    for (let i = 0; i < 3; i++) {
        // Select the coordinates at random.
        let x_coordinate = Math.floor(Math.random() * appWidth);
        let y_coordinate = Math.floor(Math.random() * appHeight);
        let wave = new Wave(x_coordinate, y_coordinate, 3);

        waves.push(wave);

        for (let gc of wave.getGraphicalComponents()) {
            app.stage.addChild(gc);
        }
    }

    app.ticker.add(delta => gameloop(delta));
}

function gameloop(delta) {

    // Make the waves grow no more than their maximum size.
    
    for (let wave of waves) {
        if (wave.radius < 200 ) {
            wave.expand();
        }    
    }
}

setup();

// Add the canvas generated by PIXI to the DOM.
document.body.appendChild(app.view);


function Wave(x_coordinate, y_coordinate, radius) {
    this.x_coordinate = x_coordinate;
    this.y_coordinate = y_coordinate;
    this.radius = radius;

    this.createCircle = function(color, radius) {
        let circle = new Graphics();
        circle.beginFill(color);
        circle.drawCircle(0, 0, radius);
        circle.endFill();
        circle.x = this.x_coordinate;
        circle.y = this.y_coordinate;
        return circle;
    };

    this.outerCircle = this.createCircle(0xFFFFFF, this.radius);
    this.innerCircle = this.createCircle(0x000000, this.radius - 2);

    this.outerCircle.alpha = 0.75;
    this.innerCircle.alpha  = 0.3;

    this.expand = function() {
        let sizeIncrement = 4;
        
        this.radius += sizeIncrement;

        this.outerCircle.width += sizeIncrement;
        this.outerCircle.height += sizeIncrement;
        
        this.innerCircle.width += sizeIncrement;
        this.innerCircle.height += sizeIncrement;
    }

    this.getGraphicalComponents = function() {
        return [this.outerCircle, this.innerCircle];
    }

}